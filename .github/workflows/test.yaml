name: Swift Lint & Test

on:
  workflow_dispatch:
  pull_request:
  push:
    branches: ["**"]

permissions:
  contents: write

jobs:
  test-macos:
    name: Test macOS (Swift ${{ matrix.swift }})
    runs-on: macos-latest
    strategy:
      matrix:
        swift: ["5.9"]
    steps:
      - uses: actions/checkout@v3

      - name: Set up Swift
        uses: swift-actions/setup-swift@v1
        with:
          swift-version: ${{ matrix.swift }}

      - name: Cache Swift packages
        uses: actions/cache@v3
        with:
          path: .build
          key: ${{ runner.os }}-spm-${{ hashFiles('**/Package.resolved') }}
          restore-keys: |
            ${{ runner.os }}-spm-

      - name: Install SwiftLint and lcov
        run: |
          brew install swiftlint lcov

      - name: Lint (SwiftLint)
        run: swiftlint

      - name: Build
        run: swift build --build-tests -Xswiftc -warnings-as-errors

      - name: Run Tests with Coverage
        run: swift test --enable-test-discovery --enable-code-coverage -Xswiftc -warnings-as-errors

      - name: Generate coverage report
        run: |
          xcrun llvm-cov export .build/arm64-apple-macosx/debug/SwiftFFetchPackageTests.xctest/Contents/MacOS/SwiftFFetchPackageTests \
            -instr-profile=.build/arm64-apple-macosx/debug/codecov/default.profdata \
            -format="lcov" > coverage.lcov

      - name: Filter coverage to source files only
        run: |
          # Filter to only include our source files (Tests already excluded by extract pattern)
          lcov --extract coverage.lcov "*/Sources/SwiftFFetch/*" -o coverage_filtered.lcov

      - name: Generate coverage summary
        run: |
          echo "## 📊 Code Coverage Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Source Files Coverage" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| File | Line Coverage | Region Coverage |" >> $GITHUB_STEP_SUMMARY
          echo "|------|---------------|-----------------|" >> $GITHUB_STEP_SUMMARY

          xcrun llvm-cov report .build/arm64-apple-macosx/debug/SwiftFFetchPackageTests.xctest/Contents/MacOS/SwiftFFetchPackageTests \
            -instr-profile=.build/arm64-apple-macosx/debug/codecov/default.profdata \
            | grep "Sources/SwiftFFetch" \
            | while read -r line; do
              file=$(echo "$line" | awk '{print $1}' | sed 's/.*Sources\/SwiftFFetch\///')
              line_total=$(echo "$line" | awk '{print $2}')
              line_missed=$(echo "$line" | awk '{print $3}')
              line_percentage=$(echo "$line" | awk '{print $4}')
              region_total=$(echo "$line" | awk '{print $8}')
              region_missed=$(echo "$line" | awk '{print $9}')
              region_percentage=$(echo "$line" | awk '{print $10}')
              echo "| $file | $line_percentage | $region_percentage |" >> $GITHUB_STEP_SUMMARY
            done

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: coverage_filtered.lcov
          flags: unittests
          name: SwiftFFetch Coverage
          fail_ci_if_error: false
          verbose: true
          token: ${{ secrets.CODECOV_TOKEN }}

      - name: Coverage Gate
        run: |
          # Extract overall coverage percentage for source files
          COVERAGE=$(xcrun llvm-cov report .build/arm64-apple-macosx/debug/SwiftFFetchPackageTests.xctest/Contents/MacOS/SwiftFFetchPackageTests \
            -instr-profile=.build/arm64-apple-macosx/debug/codecov/default.profdata \
            | grep "Sources/SwiftFFetch" | awk '{sum+=$8*$7; total+=$7} END {printf "%.2f", sum/total}')

          echo "Overall source code coverage: $COVERAGE%"

          # Set minimum coverage threshold (95%)
          THRESHOLD=95.0

          if (( $(echo "$COVERAGE < $THRESHOLD" | bc -l) )); then
            echo "❌ Coverage $COVERAGE% is below threshold $THRESHOLD%"
            exit 1
          else
            echo "✅ Coverage $COVERAGE% meets threshold $THRESHOLD%"
          fi

  test-ios:
    name: Test iOS Simulator (Swift ${{ matrix.swift }})
    runs-on: macos-latest
    strategy:
      matrix:
        swift: ["5.9"]
    steps:
      - uses: actions/checkout@v3

      - name: Set up Swift
        uses: swift-actions/setup-swift@v1
        with:
          swift-version: ${{ matrix.swift }}

      - name: Cache Swift packages
        uses: actions/cache@v3
        with:
          path: .build
          key: ${{ runner.os }}-ios-spm-${{ hashFiles('**/Package.resolved') }}
          restore-keys: |
            ${{ runner.os }}-ios-spm-

      - name: Build and Test for iOS Simulator
        run: |
          xcodebuild test -scheme SwiftFFetch -destination "platform=iOS Simulator,name=iPhone 15" -enableCodeCoverage NO

  test-tvos:
    name: Test tvOS Simulator (Swift ${{ matrix.swift }})
    runs-on: macos-latest
    strategy:
      matrix:
        swift: ["5.9"]
    steps:
      - uses: actions/checkout@v3

      - name: Set up Swift
        uses: swift-actions/setup-swift@v1
        with:
          swift-version: ${{ matrix.swift }}

      - name: Cache Swift packages
        uses: actions/cache@v3
        with:
          path: .build
          key: ${{ runner.os }}-tvos-spm-${{ hashFiles('**/Package.resolved') }}
          restore-keys: |
            ${{ runner.os }}-tvos-spm-

      - name: Build and Test for tvOS Simulator
        run: |
          xcodebuild test -scheme SwiftFFetch -destination "platform=tvOS Simulator,name=Apple TV" -enableCodeCoverage NO

  test-watchos:
    name: Test watchOS Simulator (Swift ${{ matrix.swift }})
    runs-on: macos-latest
    strategy:
      matrix:
        swift: ["5.9"]
    steps:
      - uses: actions/checkout@v3

      - name: Set up Swift
        uses: swift-actions/setup-swift@v1
        with:
          swift-version: ${{ matrix.swift }}

      - name: Cache Swift packages
        uses: actions/cache@v3
        with:
          path: .build
          key: ${{ runner.os }}-watchos-spm-${{ hashFiles('**/Package.resolved') }}
          restore-keys: |
            ${{ runner.os }}-watchos-spm-

      - name: Build and Test for watchOS Simulator
        run: |
          xcodebuild test -scheme SwiftFFetch -destination "platform=watchOS Simulator,name=Apple Watch Series 9 (45mm)" -enableCodeCoverage NO

  update-badge:
    name: Update Vibe Coded Badge
    runs-on: ubuntu-latest
    if: "!contains(github.event.head_commit.message, '[skip vibe-badge]')"
    needs: [test-macos, test-ios, test-tvos, test-watchos]
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: trieloff/vibe-coded-badge-action@main
